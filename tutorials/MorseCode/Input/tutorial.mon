using com.apamax.rpi.gpio.Setup;
using com.apamax.rpi.gpio.Buzzer;
using com.apamax.rpi.gpio.LED;

event ConvertToMorseCode {
	string toConvertToMorseCode;
}

event SetupComplete {
}

monitor MorseCode {
	
	Buzzer buzzer;
	LED led;

	action onload() {
		monitor.subscribe("Morse");
		sequence<integer> received := [0];
		log "MorseCode on load!";

		// Setup GPIO access to the pins
		(new Setup).setOutputPins([13,17]).init();

		// Log the Raspberry Pi info to the correlator log
                log com.apamax.rpi.gpio.Info.getInfo().toString();

		// Create a buzzer on pin 13
		buzzer := (new Buzzer).init(13, false);
		// create an LED on pin 17
		led := (new LED).init(17, false);
		
		on all SetupComplete() {
			log "Received SetupComplete";
			received[0] := received[0]+1;
			log "received:" + received[0].toString();
			if(received[0] >= 2) {
				log "Sending ConvertToMorseCode";
				// Tell all buzzers and LEDs to convert the string to morse code
				send ConvertToMorseCode("sos") to "Morse";
			}
		}

		log "spawning wachers";
		spawn WatchForConvertToMorseCode(led);
		spawn WatchForConvertToMorseCode(buzzer);
	}
	
	action WatchForConvertToMorseCode(any a) {
		monitor.subscribe("Morse");
		log "In Watch action";

		on all ConvertToMorseCode() as ctm {
			log "In ConvertToMorseCode";
			if(a.getActionNames().indexOf("convertToMorseCode") >= 0) {
				
				action<string> convertAction := < action<string> > a.getAction("convertToMorseCode");
				convertAction(ctm.toConvertToMorseCode);
			}
			else {
				log "Failed to find convert action. Actions are: " + a.getActionNames().toString();
			}
		}

		send SetupComplete() to "Morse";
	}
}

